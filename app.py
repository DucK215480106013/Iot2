import os
import base64
import paho.mqtt.client as mqtt
import cv2
import numpy as np
from datetime import datetime
from flask import Flask, Response, render_template, jsonify

# ================= MQTT CONFIG =================
MQTT_BROKER = "192.168.1.41"
MQTT_PORT = 1883
MQTT_TOPIC = "esp32"

# ================= FILE CONFIG =================
UPLOAD_FOLDER = "static/uploads"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# ================= GLOBAL VARIABLES =================
image_parts = []
total_parts = 0
previous_frame = None
latest_frame = None
last_motion_image = None  # ƒê∆∞·ªùng d·∫´n ·∫£nh ph√°t hi·ªán chuy·ªÉn ƒë·ªông

# ================= MQTT CALLBACK FUNCTIONS =================
def on_connect(client, userdata, flags, rc):
    """G·ªçi khi k·∫øt n·ªëi MQTT th√†nh c√¥ng"""
    print(f"‚úÖ K·∫øt n·ªëi MQTT th√†nh c√¥ng (code: {rc})")
    client.subscribe(MQTT_TOPIC)


def on_message(client, userdata, msg):
    """Nh·∫≠n d·ªØ li·ªáu ·∫£nh t·ª´ MQTT v√† x·ª≠ l√Ω"""
    global image_parts, total_parts, previous_frame, latest_frame, last_motion_image

    message = msg.payload.decode()

    if message == "end":
        if not image_parts:
            print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ·∫£nh!")
            return

        try:
            print("üì• Nh·∫≠n ·∫£nh xong. ƒêang gi·∫£i m√£...")

            # Gh√©p t·∫•t c·∫£ c√°c ph·∫ßn l·∫°i th√†nh Base64 ƒë·∫ßy ƒë·ªß
            full_image_data = "".join(image_parts)

            # Ki·ªÉm tra l·ªói padding Base64
            if len(full_image_data) % 4 != 0:
                full_image_data += "=" * (4 - len(full_image_data) % 4)

            # Gi·∫£i m√£ Base64
            image_bytes = base64.b64decode(full_image_data)

            # Chuy·ªÉn th√†nh m·∫£ng numpy
            np_arr = np.frombuffer(image_bytes, np.uint8)
            frame = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)

            if frame is None:
                print("‚ùå L·ªói gi·∫£i m√£ ·∫£nh!")
                return

            # C·∫≠p nh·∫≠t ·∫£nh m·ªõi nh·∫•t
            latest_frame = frame

            # Ph√°t hi·ªán chuy·ªÉn ƒë·ªông
            if detect_motion(frame):
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                file_name = f"motion_{timestamp}.jpg"
                file_path = os.path.join(UPLOAD_FOLDER, file_name)
                cv2.imwrite(file_path, frame)
                print(f"üì∏ Ph√°t hi·ªán chuy·ªÉn ƒë·ªông! L∆∞u ·∫£nh: {file_path}")

                # C·∫≠p nh·∫≠t ·∫£nh ph√°t hi·ªán chuy·ªÉn ƒë·ªông
                last_motion_image = file_name

        except Exception as e:
            print(f"‚ùå L·ªói x·ª≠ l√Ω ·∫£nh: {e}")

        # Reset buffer
        image_parts = []
        total_parts = 0

    else:
        try:
            # Nh·∫≠n d·ªØ li·ªáu ·∫£nh t·ª´ MQTT
            part_info, part_data = message.split(":", 1)
            part_index, total_parts = map(int, part_info.split("/"))

            if len(image_parts) == 0:
                image_parts = [""] * total_parts  # Kh·ªüi t·∫°o danh s√°ch r·ªóng

            image_parts[part_index - 1] = part_data

        except Exception as e:
            print(f"‚ùå L·ªói nh·∫≠n ph·∫ßn ·∫£nh: {e}")


def detect_motion(frame):
    """Ph√°t hi·ªán chuy·ªÉn ƒë·ªông b·∫±ng c√°ch so s√°nh v·ªõi frame tr∆∞·ªõc"""
    global previous_frame

    if previous_frame is None:
        previous_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        return False

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    diff = cv2.absdiff(previous_frame, gray)
    thresh = cv2.threshold(diff, 25, 255, cv2.THRESH_BINARY)[1]
    non_zero_count = cv2.countNonZero(thresh)

    previous_frame = gray  # C·∫≠p nh·∫≠t frame tr∆∞·ªõc

    return non_zero_count > 5000  # Ng∆∞·ª°ng ph√°t hi·ªán chuy·ªÉn ƒë·ªông


# ================= FLASK WEB SERVER =================
app = Flask(__name__)

@app.route("/")
def index():
    """Giao di·ªán ch√≠nh"""
    return render_template("index.html")


def generate_video():
    """Lu·ªìng video t·ª´ ESP32-CAM"""
    global latest_frame
    while True:
        if latest_frame is not None:
            _, buffer = cv2.imencode(".jpg", latest_frame)
            frame_bytes = buffer.tobytes()
            yield (b"--frame\r\n"
                   b"Content-Type: image/jpeg\r\n\r\n" +
                   frame_bytes + b"\r\n")


@app.route("/video_feed")
def video_feed():
    """API stream video"""
    return Response(generate_video(), mimetype="multipart/x-mixed-replace; boundary=frame")


@app.route("/latest_motion")
def latest_motion():
    """API tr·∫£ v·ªÅ ·∫£nh ph√°t hi·ªán chuy·ªÉn ƒë·ªông m·ªõi nh·∫•t"""
    global last_motion_image
    if last_motion_image:
        return jsonify({"image": f"/static/uploads/{last_motion_image}", "message": "Chuy·ªÉn ƒë·ªông ƒë∆∞·ª£c ph√°t hi·ªán!"})
    else:
        return jsonify({"image": "", "message": "Kh√¥ng c√≥ chuy·ªÉn ƒë·ªông n√†o ƒë∆∞·ª£c ph√°t hi·ªán."})



client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message
client.connect(MQTT_BROKER, MQTT_PORT, 60)
client.loop_start()  # Ch·∫°y MQTT trong lu·ªìng ri√™ng

# ================= RUN WEB SERVER =================
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
